1、switch相关
  1) 支持多条件匹配

  switch{
      case 1,2,3,4:
      default:
  }
  2) 不同的 case 之间不使用 break 分隔，默认只会执行一个 case。

  3) 如果想要执行多个 case，需要使用 fallthrough 关键字，也可用 break 终止。

  switch{
      case 1:
      ...
      if(...){
          break
      }

      fallthrough // 此时switch(1)会执行case1和case2，但是如果满足if条件，则只执行case1

      case 2:
      ...
      case 3:
  }
  
  
  2、Go 语言标准库提供了多种可动用的内置的函数。
  例如，len() 函数可以接受不同类型参数并返回该类型的长度。如果我们传入的是字符串则返回字符串的长度，如果传入的是数组，则返回数组中包含的元素个数。
  
  3、函数、方法、闭包
    Go 语言中同时有函数和方法。一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。
    所有给定类型的方法属于该类型的方法集。
    1） 语法格式如下：
    func (variable_name variable_data_type) function_name() [return_type]{
       /* 函数体*/
    }
    //例如：该 method 属于 Circle 类型对象中的方法
    func (c Circle) getArea() float64 {
      //c.radius 即为 Circle 类型对象中的属性
      return 3.14 * c.radius * c.radius
    }
    
    2） 函数语法定义：
    func function_name( [parameter list] ) [return_types] {
       函数体
    }
    
    3） 闭包是匿名函数，可在动态编程中使用。匿名函数是一个"内联"语句或表达式。匿名函数的优越性在于可以直接使用函数内的变量，不必申明。
    package main
    import "fmt"
    func main() {
        add_func := add(1,2)
        fmt.Println(add_func(1,1))
        fmt.Println(add_func(0,0))
        fmt.Println(add_func(2,2))
    } 
    // 闭包使用方法
    func add(x1, x2 int) func(x3 int,x4 int)(int,int,int)  {
        i := 0
        return func(x3 int,x4 int) (int,int,int){ 
           i++
           return i,x1+x2,x3+x4
        }
    }
  4、数组相关
   语法说明： var variable_name [SIZE] variable_type
   
  5、切片
    我们基于原数组或者切片创建一个新的切片后，那么新的切片的大小和容量是多少呢？
    这里有个公式，对于底层数组容量是 k 的切片 slice[i:j] 来说：
    var s1 = make([]byte, 5)
    长度: j-i
    容量: k-i
    numbers:=[]int{0,1,2,3,4,5,6,7,8,9,10}
    number3:=numbers[2:5]  容量为9
    mber2:=numbers[:3]   容量为11
  6、通道 chan
    通道可以设置缓冲区，通过 make 的第二个参数指定缓冲区大小,ch := make(chan int, 100)
        带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送端发送的数据可以放在缓冲区里面，
    可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。
        不过由于缓冲区的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。
    注意：
    如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；
    如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。
    接收方在有值可以接收之前会一直阻塞。
    
    读取关闭的无缓存通道：读取关闭后的无缓存通道，不管通道中是否有数据，返回值都为0和false。
    读取关闭的有缓存通道：读取关闭后的有缓存通道，将缓存数据读取完后，再读取返回值为0和false。
    
    
